<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="PanelTools" needs-panel-data="true" minver="2021a">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.3</version>
<date>2022-10-22</date>
<description>Collection of tools for handling panel data</description>
<tags>C10</tags>
<help>
# PanelTools
Collection of (hopefully) useful functions for dealing with panel datasets.


# Public functions

## pcum(const series y)
Compute cumulated value for each panel unit.

Parameters
    y   - series, target series;

Returns
Series with cumulated sum for each cross-sectional unit. NAs are replaced by
zero before cumulating.


## pmode(const series y)
Compute most frequent value for each cross-sectional unit.

Parameters
    y   - series, target series

Returns
Series with most frequent values for each cross-sectional unit. NA values are
ignored. If all values are NA for a unit, a series consisting only NA values is
returned for that unit.


## pfirst(const series y)
Compute first valid value for each panel unit.

Parameters
    y   - series, target series

Returns
Series with the first valid value of &quot;y&quot; for each cross-sectional unit. If no
valid values exists for a unit, NA is returned.


## plast(const series y)
Compute last valid value for each panel unit.

Parameters
    y   - series, target series

Returns
Series with the last valid value of &quot;y&quot; for each cross-sectional unit. If no
valid values exists for a unit, NA is returned.


## pquantile(const series y, const scalar value &quot;p-th quantile&quot;)
Compute the p-th quantile for each unit.

Parameters
    y     - series, target series
    value - scalar, p-th quantile; must be in the range 0 &lt; value &lt; 1

Returns
Series with the p-th quantile for each cross-sectional unit. NA values are
ignored. If all values are NA for a unit, a series consisting only NA values is
returned for that unit.


## pxmean(const series y)
Compute mean value of &quot;y&quot; across all units per
time period. Missing values are ignored for computing the mean.

Parameters
    y        - series, target series
Returns
Series with the mean value value across all units per observation. NA values are
completely ignored and are not counted.


## pxfraction(const series y, const scalar value &quot;Value to search&quot;,
             const bool fraction[FALSE] &quot;Fraction instead of total number&quot;)
Compute the total number of observations of &quot;value&quot; in &quot;y&quot; across all units per
time period. Missing values are completely ignored.

Parameters
    y        - series, target series
    value    - scalar, Value to search in &quot;y&quot;
    fraction - bool, if TRUE (=1) compute the fraction of observations taking the
               value &quot;value&quot;, if FALSE (=0, default) compute the number of
               observations instead.

Returns
Series with the respective value across all units per observation. NA values are
completely ignored and are not counted.


## ppolyfit(const series y, const int order[1::])
Fits a polynomial trend of order &quot;order&quot; to the input series &quot;y&quot; using OLS for each cross-sectional unit separately. This function mimics gretl's built-in function polyfit() which works only for time-series data correctly before version 2021c.

Parameters
    y        - series, target series
    order    - integer, Order of the polynomial trend

Returns
Series of fitted values for each unit. In case 'y' has missing values for a
specific unit, for this unit a time-series with NAs is returned.


## panelinfo()
Compute basic information about the panel dimension.

Returns
Nothing.



## panplot_quantile(const series y, const series date[null], bundle self[null])
Plot quantiles of cross-section dimension over time.

Parameters
    y        - series, target series
    date     - series, Date information (optional) if panel-time is not set
    self     - bundle, Optionally pass parameters for tweaking the plot
                Supported parameters and default values are:
                    string filename = &quot;display&quot;  (immediately show on screen)
                    string key_position = &quot;top left&quot;
                    string title = &quot;&quot;
                    string ylabel = &quot;&quot;
                    string xlabel = &quot;&quot;
                    scalar yrange_min = NA  (automatically set)
                    scalar yrange_max = NA  (automatically set)
                    scalar fontsize = 10
                    scalar fontsize_tics = 8
                    string options_string = &quot;&quot;
                    matrix quantiles = {0.05, 0.5, 0.95}
                    string options_string = &quot;&quot;

Returns
Nothing.


# Changelog
v0.3 (10-2022)
- add new panplot_quantile function

v0.2 (07-2021)
- add new ppolyfit() function

v0.1 (07-2021)
- initial version
</help>
<depends count="1">
extra </depends>
<gretl-function name="pcum" type="series">
 <params count="1">
  <param name="y" type="series" const="true"/>
 </params>
<code>/* Compute cumulated value for each panel unit.
return: series, Cumulated sum for each cross-sectional unit. */
set skip_missing off
errorif($datatype != 3, &quot;Only for panel dataset.&quot;)
matrix m = mshape({y}, $pd, ($nobs / $pd))
# Columns with missing values are ignored. Hence, we replace NAs before
m = ok(m) ? m : 0
series ret = vec(cum(m))
set skip_missing on
string desc = get_description(&quot;pcum&quot;, argname(y), -1)
setinfo ret --description=&quot;@desc&quot;
return ret
</code>
</gretl-function>
<gretl-function name="pquantile" type="series">
 <params count="3">
  <param name="y" type="series" const="true"/>
  <param name="value" type="scalar" const="true">
<description>p-th quantile</description>
  </param>
  <param name="by_time" type="bool" default="0" const="true"/>
 </params>
<code>/* Compute the p-th quantile for each unit. Missing values are ignored
for computation of the quantile.
by_time:
If TRUE, compute for each period the cross-sectional quantile.
If FALSE, compute the average quantile across units and time and
assume ot to be time-invariant.
return: series, p-th quantile for each cross-sectional unit. */
errorif($datatype != 3, &quot;Only for panel dataset.&quot;)
errorif(value &lt;= 0 || value &gt;= 1.0, &quot;Parameter 'value' must be in the range '0 &lt; value &lt; 1'.&quot;)
set skip_missing off
scalar N = $nobs / $pd
matrix m = mshape({y}, $pd, N)  # Rows: time, cols: units
if by_time == TRUE
  m = m'
  matrix mat = mshape(NA, $pd, 1)
else
  matrix mat = mshape(NA, N, 1)
endif
if sum(missing(m))
  # Columns may have missing values and quantile() breaks down if
  # a column only consists of NA values.
  loop i=1..N
    matrix mask = ok(m[,i])
    matrix vals = selifr(m[,i], mask)
    if nelem(vals)
      mat[i] = quantile(vals, value) # scalar value
    endif
  endloop
else
  # faster version
  matrix mat = quantile(m, value)
endif
set skip_missing on
if by_time == TRUE
  matrix r = ones(N, $pd) .* mat  # rows: time, cols: units
  r = vec(r)
  series ret = r
else
  series ret = pexpand(vec(mat))  # mat is 1 by N
endif
string desc = get_description(&quot;pquantile&quot;, argname(y), value)
setinfo ret --description=&quot;@desc&quot;
return ret
</code>
</gretl-function>
<gretl-function name="pxfraction" type="series">
 <params count="3">
  <param name="y" type="series" const="true"/>
  <param name="value" type="scalar" const="true">
<description>Value to search</description>
  </param>
  <param name="fraction" type="bool" default="0" const="true">
<description>Fraction instead of total number</description>
  </param>
 </params>
<code>/* Compute the total number of observations of &quot;value&quot; in &quot;y&quot; across
all units per time period. Missing values are completely ignored.
If fraction is TRUE, the fraction of observations of &quot;value&quot; in &quot;y&quot; across
each unit per time period is computed, instead. */
errorif($datatype != 3, &quot;Only for panel dataset.&quot;)
errorif(!ok(value), &quot;You can only search for a valid 'value'.&quot;)
scalar N = $nobs / $pd
series z = (y == value)
if fraction
  matrix x = aggregate(z, time, mean)[, 3]
else
  matrix x = aggregate(z, time, sum)[, 3]
endif
x = ok(x) ? x : 0
x = ones($pd, N) .* x
series ret = vec(x)
string desc = get_description(&quot;pxfraction&quot;, argname(y), value)
setinfo ret --description=&quot;@desc&quot;
return ret
</code>
</gretl-function>
<gretl-function name="pfirst" type="series">
 <params count="1">
  <param name="y" type="series" const="true"/>
 </params>
<code>/* Compute first valid value for each panel unit. Expand this constant value for each unit to a series. */
series ret = helper_pfirst_plast(y, FALSE)
string desc = get_description(&quot;pfirst&quot;, argname(y), -1)
setinfo ret --description=&quot;@desc&quot;
return ret
</code>
</gretl-function>
<gretl-function name="plast" type="series">
 <params count="1">
  <param name="y" type="series" const="true"/>
 </params>
<code>/* Compute last valid value for each panel unit. Expand this constant value for each unit to a series. */
series ret = helper_pfirst_plast(y, TRUE)
string desc = get_description(&quot;plast&quot;, argname(y), -1)
setinfo ret --description=&quot;@desc&quot;
return ret
</code>
</gretl-function>
<gretl-function name="pmode" type="series">
 <params count="1">
  <param name="y" type="series" const="true"/>
 </params>
<code>/* Compute most frequent value for each cross-sectional unit.
return: series, constant value for each cross-sectional unit.
Dependency: extra.gfn */
errorif($datatype != 3, &quot;Only for panel dataset.&quot;)
errorif(!nobs(y), &quot;No valid observations.&quot;)
set skip_missing off
scalar N = $nobs / $pd
matrix m = mshape({y}, $pd, N)
matrix mat = mshape(NA, N, 1)
loop i=1..N
  mat[i] = onemode(m[,i])[1]
endloop
set skip_missing on
series ret = pexpand(mat)
string desc = get_description(&quot;pmode&quot;, argname(y), -1)
setinfo ret --description=&quot;@desc&quot;
return ret
</code>
</gretl-function>
<gretl-function name="pxmean" type="series">
 <params count="1">
  <param name="y" type="series" const="true"/>
 </params>
<code>/* Compute mean for each time-period across all cross-sectional units. */
errorif($datatype != 3, &quot;Only for panel dataset.&quot;)
series ret = pxsum(y) / pxnobs(y)
string desc = get_description(&quot;pxmean&quot;, argname(y), -1)
setinfo ret --description=&quot;@desc&quot;
return ret
</code>
</gretl-function>
<gretl-function name="panelinfo" type="void">
<code>printf &quot;\nINFO: Information on panel dimensions:\n&quot;
printf &quot;Cross-sectional units = %d\n&quot;, ($nobs / $pd)
printf &quot;Time-dimension %d observations\n\n&quot;, $pd
</code>
</gretl-function>
<gretl-function name="ppolyfit" type="series">
 <params count="2">
  <param name="y" type="series" const="true"/>
  <param name="order" type="int" min="1" const="true"/>
 </params>
<code>/* Fits a polynomial trend of order &quot;order&quot; to the input series &quot;y&quot; using the method of orthogonal polynomials for each cross-sectional unit separately.
This function mimics gretl's built-in function polyfit() which works only for time-series data correctly before version 2021c.
return: series, fitted values for each unit. In case 'y' has missing values for a specific unit, for this unit a time-series with NAs is returned.
Function thankfully brought to you Jack Lucchetti.
*/
errorif($datatype != 3, &quot;Only for panel dataset. Try to use the polyfit() function, instead.&quot;)
if sum(missing(y))
  print &quot;WARNING: Series 'y' has missing values. Fitted values for some unit(s) will be NA.&quot;
endif
scalar T = $pd
scalar N = $nobs / T
set skip_missing off
matrix E
matrix Y = mshape({y}, T, N)
trend = seq(0, (T - 1))'
matrix X = 1 ~ trend .^ (seq(1, order))
mols(Y, X, &amp;E)
series ret = vec(Y - E)
string desc = get_description(&quot;ppolyfit&quot;, argname(y), order)
setinfo ret --description=&quot;@desc&quot;
set skip_missing on
return ret
</code>
</gretl-function>
<gretl-function name="panplot_quantile" type="void">
 <params count="3">
  <param name="y" type="series" const="true"/>
  <param name="date" type="series" optional="true" const="true"/>
  <param name="self" type="bundle" optional="true"/>
 </params>
<code>/* Plot quantiles of cross-section dimension over time. */
errorif(!$datatype == 3, &quot;You need a panel dataset.&quot;)
if !exists(self)
  bundle self = panplot_defaults(y)
else
  self = self + panplot_defaults(y)
endif
self.quantiles = vec(self.quantiles)
scalar n_quantiles = nelem(self.quantiles)
list L = null
loop i=1..n_quantiles
  scalar q_value = self.quantiles[i]
  series pq = pquantile(y, q_value, TRUE)
  string vname = sprintf(&quot;%s_q%d&quot;, argname(y), (100 * q_value))
  list L += genseries(vname, pxmean(pq))
endloop
string filename = self.filename
string options_string = self.options_string
string options_cmd = sprintf(&quot;options with-lines single-yaxis %s &quot;, options_string)
if exists(date)
  list L += date
else
  options_cmd += &quot;time-series&quot;
endif
string yrange_cmd = yrange_string(self)
plot L
  @options_cmd
  printf &quot;set key %s font ',%d'&quot;, self.key_position, self.fontsize
  literal set grid
  printf &quot;set title \&quot;%s\&quot; font \&quot;, %d\&quot;&quot;, self.title, self.fontsize
  printf &quot;set ylabel \&quot;%s\&quot; font \&quot;, %d\&quot;&quot;, self.ylabel, self.fontsize
  printf &quot;set xlabel \&quot;%s\&quot; font \&quot;, %d\&quot;&quot;, self.xlabel, self.fontsize
  printf &quot;set xtics font \&quot;, %d\&quot;&quot;, self.fontsize_tics
  printf &quot;set ytics font \&quot;, %d\&quot;&quot;, self.fontsize_tics
  printf &quot;%s&quot;, yrange_cmd
end plot --output=&quot;@filename&quot;
</code>
</gretl-function>
<gretl-function name="helper_pfirst_plast" type="series" private="1">
 <params count="2">
  <param name="y" type="series" const="true"/>
  <param name="do_plast" type="bool" const="true"/>
 </params>
<code>/* Wrapper for pfirst() and plast()
return: series, respective values. */
errorif($datatype != 3, &quot;Only for panel dataset.&quot;)
set skip_missing off
scalar N = $nobs / $pd
matrix m = mshape({y}, $pd, N)
matrix ret = mshape(NA, N, 1)
loop i=1..N
  matrix mask = ok(m[,i])
  matrix vals = selifr(m[,i], mask)
  scalar idx = do_plast == TRUE ? rows(vals) : 1
  ret[i] = sum(mask) ? vals[idx] : NA
endloop
set skip_missing on
return pexpand(ret)
</code>
</gretl-function>
<gretl-function name="get_description" type="string" private="1">
 <params count="3">
  <param name="fname" type="string" const="true"/>
  <param name="yname" type="string" const="true"/>
  <param name="value" type="scalar"/>
 </params>
<code>/* Retrieve series' description.
return: string */
scalar value = !exists(value) ? 1 : value
bundle B = _( ppolyfit = sprintf(&quot;polynomial fit of %s (order=%d)&quot;, yname, value), pcum = sprintf(&quot;cumuluated values of %s&quot;, yname), pquantile = sprintf(&quot;quantile (q=%g) values of %s&quot;, value, yname), pxfraction = sprintf(&quot;cross-sectional fractions of %s (value=%g)&quot;, yname, value), pfirst = sprintf(&quot;first valid values of %s&quot;, yname), plast = sprintf(&quot;last valid values of %s&quot;, yname), pmode = sprintf(&quot;modes of %s&quot;, yname), pxmean = sprintf(&quot;cross-sectional means of %s&quot;, yname) )
return B[&quot;@fname&quot;]
</code>
</gretl-function>
<gretl-function name="panplot_defaults" type="bundle" private="1">
 <params count="1">
  <param name="y" type="series" const="true"/>
 </params>
<code>/* Add default parameter values to bundle. */
bundle self
string self.filename = &quot;display&quot;
string self.key_position = &quot;top left&quot;
string self.title = &quot;&quot;
string self.ylabel = &quot;&quot;
string self.xlabel = &quot;&quot;
scalar miny = min(y)
scalar self.yrange_min = NA # miny &gt;= 0 ? (miny * 0.95) : -(abs(miny) * 0.95)
scalar self.yrange_max = NA # max(y) * 1.05
scalar self.fontsize = 10
scalar self.fontsize_tics = 8
scalar self.linewidth = 1.5
string self.options_string = &quot;&quot;
matrix self.quantiles = {0.05, 0.5, 0.95}
string self.options_string = &quot;&quot;
return self
</code>
</gretl-function>
<gretl-function name="yrange_string" type="string" private="1">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Compile the command for setting the yrange
return: string, gnuplot command */
string s = &quot;set yrange[&quot;
if ok(self.yrange_min)
  s += sprintf(&quot;%g&quot;, self.yrange_min)
endif
s += &quot;:&quot;
if ok(self.yrange_max)
  s += sprintf(&quot;%g&quot;, self.yrange_max)
endif
s += &quot;]&quot;
return s
</code>
</gretl-function>
<sample-script>
clear
set verbose off
include PanelTools.gfn

open grunfeld.gdt --quiet

panelinfo()

series invest_pfirst = pfirst(invest)
series invest_plast = plast(invest)
series invest_pcum = pcum(invest)
series invest_pmode = pmode(invest)
series invest_pquantile = pquantile(invest, 0.5)

series invest_pxmean = pxmean(invest)
series invest_pxfraction = pxfraction(invest, min(invest), FALSE)
series invest_pxfraction_fraction = pxfraction(invest, min(invest), TRUE)

print invest invest_* -o --range=1:40

series invest_poly = ppolyfit(invest, 2)
print invest invest_poly -o --range=1:40

# Plot cross-sectional quantiles over time
panplot_quantile(invest)

# Tweak the plot
bundle Plot = _(title = &quot;Some title&quot;,
                key_position = &quot;outside below&quot;,
                yrange_max = 350,
                filename = &quot;foo.png&quot;\
                )
panplot_quantile(invest, null, Plot)
</sample-script>
</gretl-function-package>
</gretl-functions>
