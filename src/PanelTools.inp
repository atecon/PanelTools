function series pcum (const series y)
    /* Compute cumulated value for each panel unit.
    return: series, Cumulated sum for each cross-sectional unit. */

    set skip_missing off

    errorif($datatype != 3, "Only for panel dataset.")

    matrix m = mshape({y}, $pd, ($nobs / $pd))

    # Columns with missing values are ignored. Hence, we replace NAs before
    m = ok(m) ? m : 0
    series ret = vec(cum(m))

    set skip_missing on

    string desc = get_description("pcum", argname(y), -1)
    setinfo ret --description="@desc"

    return ret
end function


function series pmode (const series y)
    /* Compute most frequent value for each cross-sectional unit.
    return: series, constant value for each cross-sectional unit.

    Dependency: extra.gfn */

    errorif($datatype != 3, "Only for panel dataset.")
    errorif(!nobs(y), "No valid observations.")

    set skip_missing off

    scalar N = $nobs / $pd
    matrix m = mshape({y}, $pd, N)
    matrix mat = mshape(NA, N, 1)

    loop i=1..N
        mat[i] = onemode(m[,i])[1]
    endloop

    set skip_missing on

    series ret = pexpand(mat)
    string desc = get_description("pmode", argname(y), -1)
    setinfo ret --description="@desc"

    return ret
end function


function series pquantile (const series y,
                           const scalar value "p-th quantile")
    /* Compute the p-th quantile for each unit. Missing values are ignored
    for computation of the quantile.
    return: series, p-th quantile for each cross-sectional unit. */

    errorif($datatype != 3, "Only for panel dataset.")
    errorif(value <= 0 || value >= 1.0, "Parameter 'value' must be in the range '0 < value < 1'.")

    set skip_missing off

    scalar N = $nobs / $pd
    matrix m = mshape({y}, $pd, N)
    matrix mat = mshape(NA, N, 1)

    if sum(missing(m))
        # Columns may have missing values and quantile() breaks down if
        # a column only consists of NA values.
        loop i=1..N
            matrix mask = ok(m[,i])
            matrix vals = selifr(m[,i], mask)

            if nelem(vals)
                mat[i] = quantile(vals, value) # scalar value
            endif
        endloop
    else
        # faster version
        matrix mat = quantile(m, value)
    endif

    set skip_missing on

    series ret = pexpand(vec(mat))
    string desc = get_description("pquantile", argname(y), value)
    setinfo ret --description="@desc"

    return ret
end function


function series pxfraction (const series y,
                            const scalar value "Value to search",
                            const bool fraction[FALSE] "Fraction instead of total number")
    /* Compute the total number of observations of "value" in "y" across
    all units per time period. Missing values are completely ignored.
    If fraction is TRUE, the fraction of observations of "value" in "y" across
    each unit per time period is computed, instead. */

    errorif($datatype != 3, "Only for panel dataset.")
    errorif(!ok(value), "You can only search for a valid 'value'.")


    scalar N = $nobs / $pd
    series z = (y == value)

    if fraction
        matrix x = aggregate(z, time, mean)[, 3]
    else
        matrix x = aggregate(z, time, sum)[, 3]
    endif
    x = ok(x) ? x : 0

    x = ones($pd, N) .* x

    series ret = vec(x)

    string desc = get_description("pxfraction", argname(y), value)
    setinfo ret --description="@desc"

    return ret
end function



function series helper_pfirst_plast (const series y, const bool do_plast)
    /* Wrapper for pfirst() and plast()
    return: series, respective values. */

    errorif($datatype != 3, "Only for panel dataset.")

    set skip_missing off

    scalar N = $nobs / $pd
    matrix m = mshape({y}, $pd, N)
    matrix ret = mshape(NA, N, 1)

    loop i=1..N
        matrix mask = ok(m[,i])
        matrix vals = selifr(m[,i], mask)

        scalar idx = do_plast == TRUE ? rows(vals) : 1
        ret[i] = sum(mask) ? vals[idx] : NA
    endloop

    set skip_missing on

    return pexpand(ret)
end function

function series pfirst (const series y)
    /* Compute first valid value for each panel unit. Expand this constant value for each unit to a series. */

    series ret = helper_pfirst_plast(y, FALSE)

    string desc = get_description("pfirst", argname(y), -1)
    setinfo ret --description="@desc"

    return ret
end function


function series plast (const series y)
    /* Compute last valid value for each panel unit. Expand this constant value for each unit to a series. */

    series ret = helper_pfirst_plast(y, TRUE)

    string desc = get_description("plast", argname(y), -1)
    setinfo ret --description="@desc"

    return ret
end function


function series pxmean (const series y)
    /* Compute mean for each time-period across all cross-sectional units. */

    errorif($datatype != 3, "Only for panel dataset.")

    series ret = pxsum(y) / pxnobs(y)

    string desc = get_description("pxmean", argname(y), -1)
    setinfo ret --description="@desc"

    return ret
end function


function void panelinfo (void)
    printf "\nINFO: Information on panel dimensions:\n"
    printf "Cross-sectional units = %d\n", ($nobs / $pd)
    printf "Time-dimension %d observations\n\n", $pd
end function


function series ppolyfit(const series y, const int order[1::])
    /* Fits a polynomial trend of order "order" to the input series "y" using the method of orthogonal polynomials for each cross-sectional unit separately.
    This function mimics gretl's built-in function polyfit() which works only for time-series data correctly before version 2021c.

    return: series, fitted values for each unit. In case 'y' has missing values for a specific unit, for this unit a time-series with NAs is returned.

    Function thankfully brought to you Jack Lucchetti.
    */

    errorif($datatype != 3, "Only for panel dataset. Try to use the polyfit() function, instead.")

    if sum(missing(y))
        print "WARNING: Series 'y' has missing values. Fitted values for some unit(s) will be NA."
    endif

    scalar T = $pd
    scalar N = $nobs / T

    set skip_missing off

    matrix E
    matrix Y = mshape({y}, T, N)
    trend = seq(0, (T - 1))'

    matrix X = 1 ~ trend .^ (seq(1, order))

    mols(Y, X, &E)
    series ret = vec(Y - E)

    string desc = get_description("ppolyfit", argname(y), order)
    setinfo ret --description="@desc"

    set skip_missing on

    return ret
end function


function string get_description (const string fname,
                                 const string yname,
                                 scalar value)
    /* Retrieve series' description.
    return: string */

    scalar value = !exists(value) ? 1 : value

    bundle B = _(\
                 ppolyfit = sprintf("polynomial fit of %s (order=%d)", yname, value),\
                pcum = sprintf("cumuluated values of %s", yname),\
                pquantile = sprintf("quantile (q=%g) values of %s", value, yname),\
                pxfraction = sprintf("cross-sectional fractions of %s (value=%g)", yname, value),\
                pfirst = sprintf("first valid values of %s", yname),\
                plast = sprintf("last valid values of %s", yname),\
                pmode = sprintf("modes of %s", yname),\
                pxmean = sprintf("cross-sectional means of %s", yname)\
                )

    return B["@fname"]
end function