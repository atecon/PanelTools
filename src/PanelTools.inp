function series pcum (const series y)
    /* Compute cumulated value for each panel unit.
    return: series, Cumulated sum for each cross-sectional unit. */

    set skip_missing off

    errorif($datatype != 3, "Only for panel dataset.")

    matrix m = mshape({y}, $pd, ($nobs / $pd))

    # Columns with missing values are ignored. Hence, we replace NAs before
    m = ok(m) ? m : 0
    series ret = vec(cum(m))

    set skip_missing on

    string desc = get_description("pcum", argname(y), -1)
    setinfo ret --description="@desc"

    return ret
end function


function series pmode (const series y)
    /* Compute most frequent value for each cross-sectional unit.
    return: series, constant value for each cross-sectional unit.

    Dependency: extra.gfn */

    errorif($datatype != 3, "Only for panel dataset.")
    errorif(!nobs(y), "No valid observations.")

    set skip_missing off

    scalar N = $nobs / $pd
    matrix m = mshape({y}, $pd, N)
    matrix mat = mshape(NA, N, 1)

    loop i=1..N
        mat[i] = onemode(m[,i])[1]
    endloop

    set skip_missing on

    series ret = pexpand(mat)
    string desc = get_description("pmode", argname(y), -1)
    setinfo ret --description="@desc"

    return ret
end function


function series pquantile (const series y,
                           const scalar value "p-th quantile")
    /* Compute the p-th quantile for each unit. Missing values are
    ignored for computation of the quantile.

    return: series, p-th quantile for each cross-sectional unit. */

    errorif($datatype != 3, "Only for panel dataset.")
    errorif(value <= 0 || value >= 1.0, "Parameter 'value' must be in the range '0 < value < 1'.")

    set skip_missing off

    scalar N = $nobs / $pd
    matrix m = mshape({y}, $pd, N)  # Rows: time, cols: units

    matrix mat = mshape(NA, N, 1)

    if sum(missing(m))
        /* Columns may have missing values and quantile() breaks down if
            a column only consists of NA values. */
        loop i=1..N
            matrix mtmp = m[,i]
            matrix mask = ok(mtmp)
            matrix vals = selifr(mtmp, mask)

            if nelem(vals)
                mat[i] = quantile(vals, value) # scalar value
            endif
        endloop
    else
        # faster version
        matrix mat = quantile(m, value)
    endif

    set skip_missing on

    series ret = pexpand(vec(mat))  # mat is 1 by N

    string desc = get_description("pquantile", argname(y), value)
    setinfo ret --description="@desc"

    return ret
end function


function series pxquantile (const series y,
                            const scalar value "p-th quantile")
    /* Compute the p-th quantile for each period using the
    cross-sectional dimension. Missing values are ignored for
    computation of the quantile.

    return: series, p-th quantile for each time period across the cross-sectional dimension. */

    errorif($datatype != 3, "Only for panel dataset.")
    errorif(value <= 0 || value >= 1.0, "Parameter 'value' must be in the range '0 < value < 1'.")

    set skip_missing off

    scalar N = $nobs / $pd
    matrix mat = mshape(NA, $pd, 1)
    matrix m = mshape({y}, $pd, N)  # Rows: time, cols: units
    m = m'  # Rows: units, cols: time

    if sum(missing(m))
        /* Columns may have missing values and quantile() breaks down if
            a column only consists of NA values. */
        loop i=1..$pd
            matrix mtmp = m[,i]
            matrix mask = ok(mtmp)
            matrix vals = selifr(mtmp, mask)

            if nelem(vals)
                mat[i] = quantile(vals, value) # scalar value
            endif
        endloop
    else
        # faster version for matrices without missing values
        matrix mat[1:] = quantile(m, value)'
    endif

    set skip_missing on

    matrix r = ones($pd, N) .* mat
    r = vec(r)
    series ret = r

    string desc = get_description("pxquantile", argname(y), value)
    setinfo ret --description="@desc"

    return ret
end function


function series pxfraction (const series y,
                            const scalar value "Value to search",
                            const bool fraction[FALSE] "Fraction instead of total number")
    /* Compute the total number of observations of "value" in "y" across
    all units per time period. Missing values are completely ignored.
    If fraction is TRUE, the fraction of observations of "value" in "y" across
    each unit per time period is computed, instead. */

    errorif($datatype != 3, "Only for panel dataset.")
    errorif(!ok(value), "You can only search for a valid 'value'.")


    scalar N = $nobs / $pd
    series z = (y == value)

    if fraction
        matrix x = aggregate(z, time, mean)[, 3]
    else
        matrix x = aggregate(z, time, sum)[, 3]
    endif
    x = ok(x) ? x : 0

    x = ones($pd, N) .* x

    series ret = vec(x)

    string desc = get_description("pxfraction", argname(y), value)
    setinfo ret --description="@desc"

    return ret
end function


function series helper_pfirst_plast (const series y, const bool do_plast)
    /* Wrapper for pfirst() and plast()
    return: series, respective values. */

    errorif($datatype != 3, "Only for panel dataset.")

    set skip_missing off

    scalar N = $nobs / $pd
    matrix m = mshape({y}, $pd, N)
    matrix ret = mshape(NA, N, 1)

    loop i=1..N
        matrix mask = ok(m[,i])
        matrix vals = selifr(m[,i], mask)

        scalar idx = do_plast == TRUE ? rows(vals) : 1
        ret[i] = sum(mask) ? vals[idx] : NA
    endloop

    set skip_missing on

    return pexpand(ret)
end function

function series pfirst (const series y)
    /* Compute first valid value for each panel unit. Expand this constant value for each unit to a series. */

    series ret = helper_pfirst_plast(y, FALSE)

    string desc = get_description("pfirst", argname(y), -1)
    setinfo ret --description="@desc"

    return ret
end function


function series plast (const series y)
    /* Compute last valid value for each panel unit. Expand this constant value for each unit to a series. */

    series ret = helper_pfirst_plast(y, TRUE)

    string desc = get_description("plast", argname(y), -1)
    setinfo ret --description="@desc"

    return ret
end function


function series pxmean (const series y)
    /* Compute mean for each time-period across all cross-sectional units. */

    errorif($datatype != 3, "Only for panel dataset.")

    series ret = pxsum(y) / pxnobs(y)

    string desc = get_description("pxmean", argname(y), -1)
    setinfo ret --description="@desc"

    return ret
end function


function void panelinfo (void)
    printf "\nINFO: Information on panel dimensions:\n"
    printf "Number of cross-sectional units = %d\n", ($nobs / $pd)
    printf "Number of time-dimension %d observations\n\n", $pd
end function


function series ppolyfit (const series y, const int order[1::])
    /* Fits a polynomial trend of order "order" to the input series "y" using the method of orthogonal polynomials for each cross-sectional unit separately.
    This function mimics gretl's built-in function polyfit() which works only for time-series data correctly before version 2021c.

    return: series, fitted values for each unit. In case 'y' has missing values for a specific unit, for this unit a time-series with NAs is returned.

    Function thankfully brought to you Jack Lucchetti.
    */

    errorif($datatype != 3, "Only for panel dataset. Try to use the polyfit() function, instead.")

    if sum(missing(y))
        print "WARNING: Series 'y' has missing values. Fitted values for some unit(s) will be NA."
    endif

    scalar T = $pd
    scalar N = $nobs / T

    set skip_missing off

    matrix E
    matrix Y = mshape({y}, T, N)
    trend = seq(0, (T - 1))'

    matrix X = 1 ~ trend .^ (seq(1, order))

    mols(Y, X, &E)
    series ret = vec(Y - E)

    string desc = get_description("ppolyfit", argname(y), order)
    setinfo ret --description="@desc"

    set skip_missing on

    return ret
end function


function string get_description (const string fname,
                                 const string yname,
                                 scalar value)
    /* Retrieve series' description.
    return: string */

    scalar value = !exists(value) ? 1 : value

    bundle B = _(\
                ppolyfit = sprintf("polynomial fit of %s (order=%d)", yname, value),\
                pcum = sprintf("cumuluated values of %s", yname),\
                pquantile = sprintf("quantile (q=%g) values of %s", value, yname),\
                pxquantile = sprintf("quantile (q=%g) values of %s over time", value, yname),\
                pxfraction = sprintf("cross-sectional fractions of %s (value=%g)", yname, value),\
                pfirst = sprintf("first valid values of %s", yname),\
                plast = sprintf("last valid values of %s", yname),\
                pmode = sprintf("modes of %s", yname),\
                pxmean = sprintf("cross-sectional means of %s", yname)\
                )

    return B["@fname"]
end function


function bundle panplot_defaults (const series y)
    /* Add default parameter values to bundle. */

    bundle self

    string self.filename = "display"
    string self.key_position = "top left"
    string self.title = ""
    string self.ylabel = ""
    string self.xlabel = ""
    string self.noenhanced = "noenhanced"
    scalar miny = min(y)
    scalar self.yrange_min = NA # miny >= 0 ? (miny * 0.95) : -(abs(miny) * 0.95)
    scalar self.yrange_max = NA # max(y) * 1.05
    scalar self.fontsize = 10
    scalar self.fontsize_tics = 8
    scalar self.linewidth = 1.5
    string self.options_string = ""
    matrix self.quantiles = {0.05, 0.5, 0.95}

    return self
end function


function string yrange_string (const bundle self)
    /* Compile the command for setting the yrange
    return: string, gnuplot command */

    string s = "set yrange["

    if ok(self.yrange_min)
        s += sprintf("%g", self.yrange_min)
    endif
    s += ":"

    if ok(self.yrange_max)
        s += sprintf("%g", self.yrange_max)
    endif
    s += "]"

    return s
end function


function scalar panplot_quantile (const series y,
                                  const bool do_pxquantile[FALSE],
                                  bundle self[null])
    /* Plot quantiles of cross-section dimension over time.
    return: FALSE if no error occurs, otherwise TRUE. */

    errorif(!$datatype == 3, "You need a panel dataset.")

    if !exists(self)
        bundle self = panplot_defaults(y)
    else
        bundle self = self + panplot_defaults(y)
    endif

    self.quantiles = vec(self.quantiles)
    scalar n_quantiles = nelem(self.quantiles)
    string funcname = do_pxquantile == TRUE ? "pxquantile" : "pquantile"

    list L = null

    loop i=1..n_quantiles
        scalar q_value = self.quantiles[i]
        series pq = feval(funcname, y, q_value)
        string vname = sprintf("%s_q%d",
                               argname(y),
                               (100 * q_value))

        genseries(vname, pxmean(pq))

        if sum(missing(@vname)) == 0
            L += @vname
        else
            printf "WARNING: Missing values for quantile = %g. Ignore.\n", q_value
        endif
    endloop

    if nelem(L) == 0
        print "ERROR: Nothing to plot due to missing values."
        return TRUE
    else
        string filename = self.filename
        string options_cmd = "options with-lines single-yaxis time-series "
        options_cmd += self.options_string
        string yrange_cmd = yrange_string(self)

        plot L
            @options_cmd
            printf "set key %s font ',%d'", self.key_position, self.fontsize
            literal set grid
            printf "%s", get_line_options(self)
            printf "set title \"%s\" font \", %d\" %s", self.title, self.fontsize, self.noenhanced
            printf "set ylabel \"%s\" font \", %d\" %s", self.ylabel, self.fontsize, self.noenhanced
            printf "set xlabel \"%s\" font \", %d\" %s", self.xlabel, self.fontsize, self.noenhanced
            printf "set xtics font \", %d\"", self.fontsize_tics
            printf "set ytics font \", %d\"", self.fontsize_tics
            printf "%s", yrange_cmd
        end plot --output="@filename"
    endif

    return FALSE
end function

function string get_line_options (const bundle self)
    /* Compile the gnuplot command string for tweaking lines.
    return: string */

    string ret = ""

    loop i=1..nelem(self.quantiles)
        ret += sprintf("set linetype %d lw %g\n", $i, self.linewidth)
    endloop

    return ret
end function


function matrix meanc_robust (const matrix X)
    /* Compute mean values for each column even in case of missing values. */

    matrix B = ok(X)

    return sumc(B ? X : 0) ./ sumc(B)
end function


function matrix sdc_robust (const matrix x)
    /* Compute standard deviation in case of nan values in matrix. */

    matrix m = ok(x)
    matrix d = x .- meanc_robust(x)

    return sqrt(sumc( (m ? d : 0 ).^2 ) ./ sumc(m))
end function


function matrix mpmean (matrix m, const int N)
    /* Compute vector of mean values of the column vector "m" for each
    cross-sectional unit. Missing values are automatically handled.
    Matrix equivalent to gretl's built-in pmean() function.

    return: matrix, Stacked time-series of means of "m". */

    set skip_missing off

    scalar T = rows(m) / N

    matrix x = mshape(NA, (N * T), cols(m))
    matrix unity = ones(T, N)

    loop i=1..cols(m)
        x[,i] = vec( unity .* meanc_robust(mshape(m[,i], T, N)) )
    endloop
    set skip_missing on

    return x
end function


### Fixed-effects estimator
function matrix get_ahat (const matrix mybar "Unit-specific mean of 'y'",
                          const matrix mxbar "Unit-specific means of 'x' per columns",
                          const bundle self)
    /* Compute fixed-effects.
    return: matrix, Column vector with fixed-effects as stacked time-series. */

    mybar_values = vec(mshape(mybar, self.T, self.N)[1,]) # N by 1

    # Extract vector of unit-specific mean values: N by k
    matrix x = mshape(NA, self.N, cols(mxbar))
    loop i=1..cols(mxbar)
        x[,i] = vec(mshape(mxbar[,i], self.T, self.N)[1,]) # only 1st row as constant
    endloop

    matrix ahat = mybar_values .- (x * self.coeff)

    return vec(ones(self.T, self.N) .* ahat')
end function


function bundle fe_estimator (const matrix y,
                              const matrix X,
                              const int N[1::] "Number of cross-sectional units")
    /* Fixed-effects estimation using matrices.
    return: bundle, Model output. */

    set skip_missing off

    matrix mask
    bundle B = model_bundle_basics(y, X, N)
    string B.estimator = "fixed_effects"

    matrix mybar = mpmean(y, N)
    matrix mxbar = mpmean(X, N)
    matrix endog = y .- mybar
    matrix exog = X .- mxbar


    # Drop eventual intercept
    scalar nc = cols(exog)
    matrix exog = drop_constants(exog, &mask)
    print_number_of_dropped_cols(nc, cols(exog))

    matrix mxbar = selifc(mxbar, mask)

    # As some columns may be dropped, we need to update B.parnames
    B.parnames = mask_string_array(B.parnames, mask)

    matrix uhat = mshape(NA, rows(endog), 1)
    matrix vcv = mshape(NA, cols(exog), cols(exog))

    catch matrix B.coeff = mols(endog, exog, &uhat, &vcv)
    B.error = $error
    if B.error
        return B
    endif

    rnameset(B.coeff, B.parnames)
    scalar B.ncoeff = cols(exog)  # "const" may have been dropped
    matrix B.vcv = vcv
    matrix B.uhat = uhat
    matrix B.xmat = parnames_to_matrix(X, B.parnames)
    matrix B.ahat = get_ahat(mybar, mxbar, B)
    matrix B.yhat = B.ahat + B.xmat * B.coeff
    matrix B.rsq = rsq_overall(y, B.yhat)
    scalar B.ess = B.uhat'B.uhat
    scalar B.sigma = sdc(B.uhat, (B.N * (B.T - 1) - B.ncoeff))
    /* TODO: Needs more work to be done
    matrix B.stderr = sqrt(diag(vcv))
    */

    set skip_missing on

    return B
end function


function scalar rsq_overall (const matrix y, const matrix yhat)
    /* Compute the overall R^2 statistics as defined in Verbeek's textbook.
    return: scalar, overall R^2 statistics */

    scalar x = mcorr(y ~ yhat)[1,2]^2

    return ok(x) ? x : 0
end function


function matrix parnames_to_matrix (const matrix x, const strings S)
    /* Compile a matrix of series based on an array of series names.
    return: matrix, Including columns as named in 'S'. */

    matrix R
    strings xnames = cnameget(x)
    strings Rnames

    loop foreach i S
        matrix m = instrings(xnames, "$i")
        if nelem(m)
            R ~= x[, m[1]]
            Rnames += "$i"
        endif
    endloop

    cnameset(R, Rnames)

    return R
end function


function void print_number_of_dropped_cols (const int before[0::],
                                            const int after[0::])
    ndropped = before - after
    if ndropped > 0
        printf "INFO: Dropped %d column(s) from feature list.\n", ndropped
    endif
end function


function strings mask_string_array (const strings S,
                                    matrix mask)
    /* Select from S only masked entries.
    return: string array */

    strings ret = array()
    mask = vec(mask)

    if sum(mask) == 0
        print "WARNING: Matrix 'mask' has only zeros. Ignore."
        return ret
    endif
    if nelem(mask) == 0 || nelem(S) == 0
        print "WARNING: Either matrix 'mask' or string array S has no valid entries. Ignore."
        return ret
    endif
    if nelem(mask) != nelem(S)
        print "ERROR: String array must have the same dimension as vector. Return empty array"
        return ret
    endif

    loop i=1..rows(mask)
        if mask[i] == TRUE
            ret += S[i]
        endif
    endloop

    return ret
end function


function bundle pols_estimator (const matrix y,
                                const matrix X,
                                const int N[1::] "Number of cross-sectional units")
    /* Pooled OLS estimation using matrices without inference.
    Equivalent to gretl's "panel" command with the option "--pooled".
    return: bundle, Model output. */

    bundle B = model_bundle_basics(y, X, N)
    string B.estimator = "ols"

    matrix uhat = mshape(NA, rows(y), 1)
    matrix vcv = mshape(NA, cols(X), cols(X))

    catch matrix B.coeff = mols(y, X, &uhat, &vcv)
    B.error = $error
    if B.error
        return B
    endif

    rnameset(B.coeff, cnameget(X))
    scalar B.ncoeff = cols(X)
    matrix B.vcv = vcv
    matrix B.uhat = uhat
    matrix B.xmat = parnames_to_matrix(X, B.parnames)
    matrix B.yhat = B.xmat * B.coeff
    matrix B.rsq = rsq_overall(y, B.yhat)
    scalar B.ess = B.uhat'B.uhat
    scalar B.sigma = sdc(B.uhat, (B.NT - B.ncoeff))
    matrix B.stderr = sqrt(diag(vcv))

    return B
end function


function bundle model_bundle_basics (const matrix y,
                                     const matrix X,
                                     const int N[1::] "Number of cross-sectional units")
    /* Fill model bundle with basic information
    return: bundle, basic initial information. */

    bundle B

    scalar B.N = N
    scalar B.T = rows(y) / B.N # consider the case that y is sub-sampled
    scalar B.NT = B.N * B.T
    string B.depvar = nelem(cnameget(y)) ? cnameget(y)[1] : ""
    strings B.parnames = cnameget(X)
    scalar B.ncoeff = cols(X)
    scalar B.error = FALSE

    return B
end function


function matrix drop_constants (const matrix m, matrix *mask[null])
    /* Drop columns which are constant over its entire length.
    return: matrix, Columns which are not constant over its entire length. */

    matrix mask = (sdc_robust(m) .!= 0)
    return selifc(m, mask)
end function


function matrix pfcast (matrix xtest "Values of test set",
                        const bundle Model "Model object",
                        const bool verbose[FALSE])
    /* Compute static point forecasts for a given model.
    return: matrix, Stacked "horizon" by "N" time-series of forecasts. */

    if Model.estimator == "fixed_effects"
        matrix xtest = drop_constants(xtest)
    endif

    errorif(rows(Model.coeff) != cols(xtest),\
            "Number of variables does not match length of coefficient vector.")

    scalar horizon = rows(xtest) / Model.N

    if verbose
        print "INFO: Compute predictions."
    endif

    matrix fc = xtest * Model.coeff

    if Model.estimator == "fixed_effects"  # add fixed-effects
        fc = mshape(fc, horizon, Model.N)
        fc = fc .+ mshape(Model.ahat, Model.T, Model.N)[1,]  # N by 1
    endif

    if verbose
        print "INFO: Finished model estimation."
    endif

    return vec(fc)
end function
