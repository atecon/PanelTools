set verbose off
clear

set assert stop
# include assertion.gfn

include extra.gfn
include "./src/PanelTools.inp" --force


# Helper function
function scalar equal_vectors (matrix y, matrix x)
    /* Check for element-wise equality of both vectors.
    return: scalar, TRUE (=1) of equal at each row, otherwise FALSE (=0). */

    y = vec(y)
    x = vec(x)

    d = abs(y .- x)
    d = selifr(d, ok(d))

    if sumc(d) == 0
        return TRUE
    else
        return FALSE
    endif
end function



open grunfeld.gdt -q -p
genr unit
genr time
smpl unit == 2 && time <= 2 --restrict
series value = NA
smpl unit <= 2 && time <= 4 --restrict --replace --permanent
series expected = {3078.50; 7740.20; 13127.30; 15919.50; 0; 0; 2676.3; 4478.2}

function void test_pcum (const series y, const series expected)
    print "Start testing pcum()"

    # Given
    genr unit

    # When
    series actual = pcum(y)
    series delta = actual - expected

    # Then
    loop i=min(unit)..max(unit)
        smpl unit == $i --restrict --replace
        assert(sum(delta > 0.001) == 0)
    endloop
end function
test_pcum(value, expected)


nulldata 12 --preserve
setobs 3 1:1 --stacked-time-series
series y_with_nan = {1; 2; 3;\
                    3; NA; 1;\
                    NA; 2; 1;\
                    NA; NA; NA\
                    }
series y =          {1; 2; 3;\
                    3; 2; 1;\
                    5; 2; 1;\
                    1; 1; 1\
                    }

series expected_with_nan = {2; 2; 2;\
                            2; 2; 2;\
                            1.5; 1.5; 1.5;\
                            NA; NA; NA\
                           }
series expected =           {2; 2; 2;\
                            2; 2; 2;\
                            2; 2; 2;\
                            1; 1; 1\
                           }

bundles Params = null
Params = Params + _(y = y, value = 0.5, expected = expected)
Params = Params + _(y = y_with_nan, value = 0.5, expected = expected_with_nan)

function void test_pquantile (const bundles P)
    print "Start testing function pquantile()."

    loop foreach i P
        # Given + When
        series expected = P[i].expected
        series actual = pquantile(P[i].y, P[i].value)

        # Then
        assert(equal_vectors({actual}, {expected}) == TRUE)
    endloop
end function
test_pquantile(Params)


nulldata 12 --preserve
setobs 4 1:1 --stacked-time-series
series y = {1; 2; 3; NA;\
            1; 2; NA; NA;\
            NA; NA; NA; NA}
bundles Params = null
Params = Params + _(value = 1, expected = {1; 0; 0; 0;\
                                           1; 0; 0; 0;\
                                           1; 0; 0; 0\
                                           },\
                    fraction = TRUE)
Params = Params + _(value = 2, expected = {0; 1; 0; 0;\
                                           0; 1; 0; 0;\
                                           0; 1; 0; 0\
                                           },\
                    fraction = TRUE)
Params = Params + _(value = -1, expected = {0; 0; 0; 0;\
                                           0; 0; 0; 0;\
                                           0; 0; 0; 0\
                                           },\
                    fraction = TRUE)

Params = Params + _(value = 1, expected = {2; 0; 0; 0;\
                                           2; 0; 0; 0;\
                                           2; 0; 0; 0\
                                           },\
                    fraction = FALSE)
Params = Params + _(value = 2, expected = {0; 2; 0; 0;\
                                           0; 2; 0; 0;\
                                           0; 2; 0; 0\
                                           },\
                    fraction = FALSE)
Params = Params + _(value = -1, expected = {0; 0; 0; 0;\
                                           0; 0; 0; 0;\
                                           0; 0; 0; 0\
                                           },\
                    fraction = FALSE)

function void test_pxfraction (const bundles P, const series y)
    print "Start testing function pxfraction()."

    loop foreach i P
        # Given + When
        series actual = pxfraction(y, P[i].value, P[i].fraction)

        print y actual -o

        # Then
        assert(equal_vectors({actual}, P[i].expected) == TRUE)
    endloop
end function
test_pxfraction(Params, y)


nulldata 12 --preserve
setobs 3 1:1 --stacked-time-series
series y = {1; 2; 3;\
            3; NA; 1;\
            NA; 2; 1;\
            NA; NA; NA\
            }
series expected = {1; 1; 1;\
                    3; 3; 3;\
                    2; 2; 2;\
                    NA; NA; NA\
                    }
function void test_pfirst (const series input, const series expected)
    print "Start testing function pfirst()."

    series actual = pfirst(input)
    series d = actual - expected

    # Then
    assert(sum(abs(d)) == 0)
end function
test_pfirst(y, expected)


nulldata 12 --preserve
setobs 3 1:1 --stacked-time-series
series y = {1; 2; 3;\
            3; NA; 1;\
            NA; 2; 1;\
            NA; NA; NA\
            }
series expected = {3; 3; 3;\
                    1; 1; 1;\
                    1; 1; 1;\
                    NA; NA; NA\
                    }
function void test_plast (const series input, const series expected)
    print "Start testing function plast()."

    series actual = plast(input)
    series d = actual - expected

    # Then
    assert(sum(abs(d)) == 0)
end function
test_plast(y, expected)


nulldata 12 --preserve
setobs 3 1:1 --stacked-time-series
series y = {1; 2; 3;\
            3; NA; 1;\
            NA; 2; 1;\
            NA; NA; NA\
            }
series expected = {2; 2; 5/3;\
                   2; 2; 5/3;\
                   2; 2; 5/3;\
                   2; 2; 5/3\
                   }
function void test_pxmean (const series input, const series expected)
    print "Start testing function pxmean()."

    series actual = pxmean(input)
    series d = actual - expected

    # Then
    assert(sum(abs(d)) == 0)
end function
test_pxmean(y, expected)


nulldata 12 --preserve
setobs 3 1:1 --stacked-time-series
series y = {1; 2; 3;\
            3; 1; 1;\
            NA; 2; 2;\
            NA; NA; NA\
            }
series expected = {3; 3; 3;\
                    1; 1; 1;\
                    2; 2; 2;\
                    NA; NA; NA\
                    }
function void test_pmode (const series input, const series expected)
    print "Start testing function pmode()."

    # Given + When
    series actual = pmode(input)
    series d = actual - expected

    # Then
    assert(sum(abs(d)) == 0)
end function
test_pmode(y, expected)


open grunfeld.gdt -q -p
panelinfo()

print "Finished all tests succesfully."
quit

